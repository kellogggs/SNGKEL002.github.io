{"title":"a1","markdown":{"yaml":{"title":"a1","author":"Kelly-Robyn Singh","date":"2023-10-25","output":"html_document"},"headingText":"removed stop words","containsRefs":false,"markdown":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, eval = FALSE, message = FALSE)\n```\n\n```{r Loading Libraries, echo=FALSE, message=FALSE, warning=FALSE, eval=TRUE}\n\n\nlibrary(glmnet)\nlibrary(reticulate)\nlibrary(tensorflow)\nlibrary(keras)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(tidytext)\nlibrary(rpart) \nlibrary(dplyr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(rpart.plot)\nlibrary(knitr)\nlibrary(kableExtra)\n\nsetwd(\"C:/Users/User/Desktop/MSc_Data_Science/DS4I/SNGKEL002.github.io\")\n\nload(file = \"C:/Users/User/Desktop/MSc_Data_Science/DS4I/SNGKEL002.github.io/A1Final.RData\")\n```\n\n```{r Defining Stop Words}\nreplace_reg <- \"(http.*?(\\\\s|.$))|(www.*?(\\\\s|.$))|&amp;|&lt;|&gt;\"\n#rnum <- \"\\\\d+\"\nunnest_reg <- \"[^\\\\w_#@']\"\n```\n\n```{r Reading in Data}\nset.seed(11)\n# set as tibble\nsona <- as_tibble(sona)\nsona <- sona %>% mutate(speech = str_replace(speech, \"\\\\d{1,2} [A-Za-z]+ \\\\d{4}\", \"\")) # Remove dates at the start of the speech\n# clean dates \nsona1 <- sona %>% mutate(speech = str_replace(speech, pattern = \"^Thursday, \", replacement = \"\"))%>%\n  mutate(filename = sub(\"\\\\.txt$\", \" \", filename)) \n\n# remove dates on 2 remaining Ramaphosa speeche# rm white space\n\n\n```\n```{r, eval=TRUE, echo=FALSE}\nggplot(sona1, aes(x = year)) +\n  geom_bar(fill = \"steelblue\") +\n  labs(title = \"Speech Count by Year\",\n       x = \"Year\",\n       y = \"Number of Speeches\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(fill = \"Legend Title\")\n\n```\n\nFigure 1: Barplot Showing the Number of Speeches Given Per Year.\n```{r, eval=TRUE, echo=FALSE}\nggplot(sona1, aes(x = reorder(president_13, -table(president_13)[president_13]), fill = president_13)) +\n  geom_bar() +\n  labs(title = \"Number of Speeches per President\",\n       x = \"President\",\n       y = \"Number of Speeches\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(fill = \"Legend Title\")\n\n```\nFigure 2: Barplot Showing the Number of Speeches Given By Each President.\n\n```{r, eval=TRUE, echo=FALSE}\n\n# Create a plot of speech length against filename\nggplot(sona, aes(x = filename, y = nchar(speech))) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  labs(\n    title = \"Speech Length vs. Filename\",\n    x = \"Filename\",\n    y = \"Speech Length\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n```\nFigure 3: Barplot Showing the Speech Length of Each Speech.\n\n```{r}\nsona <- sona1 %>% mutate(speech = str_trim(speech, side = \"left\")) %>%\n  mutate(filename = sub(\"\\\\.txt$\", \"\", filename))  %>%\n  filter(!(president_13 %in% c(\"Motlanthe\", \"deKlerk\")))\n```\n\n\n```{r Tokenization}\nsona_tokens <- unnest_tokens(sona, sentence, speech, token = 'sentences') \nsona_tokens <- sona_tokens %>% mutate(sentence = str_replace_all(sentence, \"[[:punct:]]\", \"\")) %>%\n                   mutate(ID = row_number()) %>%\n                   mutate(president_13 = as.factor(president_13))\n\nword_bag <- sona_tokens %>% \n            unnest_tokens(input = sentence, output = word, token = 'words') %>%\n            group_by(ID, president_13, word) %>% \n            summarise(\"count\" = n()) %>% filter(!word %in% stop_words$word) %>%\n            top_n(200)\n\n```\n\n```{r Bag of Words}\nsona_tdf <- sona_tokens %>%\n  unnest_tokens(input = sentence, output = word, token = 'words') %>%\n  inner_join(word_bag) %>%\n  group_by(ID, president_13, word) %>%\n  count() %>%  \n  group_by(president_13) %>%\n  mutate(total = sum(n)) %>%\n  ungroup()\n\n# bag of words\nbag_of_words <- sona_tdf %>% \n  select(ID, president_13, word, n) %>% \n  pivot_wider(names_from = word, values_from = n, values_fill = 0) %>%\n  mutate(president_13 = as.factor(president_13))\nclass(bag_of_words)\n\nlevels(bag_of_words$president_13)\n```\n\n```{r}\n# balance dataset \nlibrary(caret)\n#bag_of_words <- caret::downSample(x = bag_of_words[ , -ncol(bag_of_words)],\n #                        y = bag_of_words$president_13, )\n\n# confirm data is balanced \n#table(bag_of_words$president_13)\n\n# train ids\nset.seed(11)\ntrain_ids <- bag_of_words %>%\n  group_by(president_13) %>%\n  slice_sample(prop = 0.7) %>%\n  ungroup() %>%\n  select(ID)\n\ntrain_bow <- bag_of_words %>%\n  right_join(train_ids, by = \"ID\") %>%\n  select(-ID)\n\ntest_bow <- bag_of_words %>%\n  anti_join(train_ids, by = \"ID\") %>%\n  select(-ID)\n\ntrain_bow_x <- train_bow %>% select(-president_13)\ntrain_bow_y <- train_bow$president_13\n\n# test bow\ntest_bow_x <- test_bow %>% select(-president_13)\ntest_bow_y <- test_bow$president_13\n\nnumerical_target_btr <- factor(train_bow_y)\ntrain_bow_y <- as.numeric(numerical_target_btr)-1\ntrain_bow_y <- to_categorical(train_bow_y, dtype = \"float32\")\n\n\nnumerical_target_bte <- factor(test_bow_y)\ntest_bow_y <- as.numeric(numerical_target_bte)-1\ntest_bow_y <- to_categorical(test_bow_y, dtype = \"float32\")\n```\n\n```{r}\n# feed forward neural network \nmodel_ff_bow <- keras_model_sequential() %>%\nlayer_dense(units = 32, activation = \"relu\", input_shape = ncol(train_bow_x)) %>%\nlayer_dense(units = 32, activation = \"relu\", kernel_regularizer = regularizer_l2(0.01)) %>%\nlayer_dense(units = 4, activation = \"softmax\")\nsummary(model_ff_bow)\n# compile model\nmodel_ff_bow %>% compile(\nloss = \"categorical_crossentropy\",\noptimizer = optimizer_adam(learning_rate = 0.001),\nmetrics = c(\"accuracy\")\n)\ngc()\n\ntrain_bow_x <- as.matrix(train_bow_x) \nmodel_ff_bow1 <- model_ff_bow %>% fit(train_bow_x, train_bow_y, epochs = 10, batch_size = 5, validation_split = 0.1)\n\ntest_bow_x<- as.matrix(test_bow_x)\nresults_bownn <- model_ff_bow %>% evaluate(test_bow_x, test_bow_y, batch_size = 15, verbose=2)\n```\n\n```{r, eval=TRUE, echo=FALSE}\nplot(model_ff_bow1)\n```\nFigure 4: Plot Showing the Accuracy and Loss of The Feed Forward Neural Network Model Using Bag of Words Features .\n\n```{r}\n#tfidf \n###tf-idf\nndocs <- length(unique(sona_tdf$ID))\n  \nidf <- sona_tdf %>%\n  group_by(word) %>%\n  summarise(docs_with_word = n()) %>%\n  ungroup() %>%\n  mutate(idf = log(ndocs/docs_with_word)) %>% arrange(desc(idf))\n\nsona_tdf <- sona_tdf %>%\n left_join(idf, by = \"word\") %>%\nmutate(tf = n/total, tf_idf = tf*idf)\n\nsona_tdf <- sona_tdf %>%\n  select(-idf, -tf, -tf_idf) %>%\n  bind_tf_idf(word, ID, n)\n\ntfidf <- sona_tdf %>%\n  select(ID, word, president_13, tf_idf) %>%\n  pivot_wider(names_from = word, values_from = tf_idf, values_fill = 0) %>%\n  left_join(sona_tokens %>% select(ID, president_13))\n\n# split data into train and test\ntrain_ids_tf <- tfidf %>%\n  group_by(president_13) %>%\n  slice_sample(prop = 0.7) %>%\n  ungroup() %>%\n  select(ID)\n\n# tfidf train\ntrain_tfidf <- tfidf %>%\n  right_join(train_ids_tf, by = \"ID\") %>%\n  select(-ID)\n\n# bag of words test\ntest_tfidf <- tfidf %>%\n  anti_join(train_ids_tf, by = \"ID\") %>%\n  select(-ID)\n\ntest_tfidf_x <- test_tfidf %>% select(-president_13)\ntest_tfidf_y <- test_tfidf$president_13\n\ntrain_tfidf_x <- train_tfidf %>% select(-president_13)\ntrain_tfidf_y <- train_tfidf$president_13\n\n# Model\nnumerical_target_tr <- factor(train_tfidf_y)\ntrain_tfidf_y <- as.numeric(numerical_target_tr) - 1\nunique(train_tfidf_y)\ntrain_tfidf_y <- to_categorical(train_tfidf_y, dtype = \"float32\")\nunique(train_tfidf_y)\n\nnumerical_target_test_tf <- factor(test_tfidf_y)\ntest_tfidf_y <- as.numeric(numerical_target_test_tf) - 1\nunique(test_tfidf_y)\ntest_tfidf_y <- to_categorical(test_tfidf_y, dtype = \"float32\")\nunique(test_tfidf_y)\n\n```\n```{r}\n\n# feed forward neural network\nmodel_ffnn_tfidf <- keras_model_sequential() %>%\n  layer_dense(units = 200, activation = \"relu\", input_shape = ncol(train_tfidf_x)) %>%\n  layer_dense(units = 150, activation = \"relu\") %>%\n  layer_dense(units = 100, activation = \"relu\", kernel_regularizer = regularizer_l2(0.01)) %>%\n  layer_dense(units = 50, activation = \"tanh\") %>%\n  layer_dense(units = 4, activation = \"softmax\")\n\nsummary(model_ffnn_tfidf)\n\n# compile model\nmodel_ffnn_tfidf %>% compile(\n  loss = \"categorical_crossentropy\",\n  optimizer = \"adam\",\n  metrics = c(\"accuracy\")\n)\n\n# fit model\ntrain_tfidf_x <- as.matrix(train_tfidf_x)\n\nnn_mod1_tfidf <- model_ffnn_tfidf %>% fit(train_tfidf_x, train_tfidf_y, epochs = 10, batch_size = 15, validation_split = 0.2)\n\ntest_tfidf_x <- as.matrix(test_tfidf_x)\n\nresults_tf_ffnn <- model_ffnn_tfidf %>% evaluate(test_tfidf_x, test_tfidf_y, batch_size = 15, verbose = 2)\n```\n```{r, eval=TRUE, echo=FALSE}\nplot(nn_mod1_tfidf)\n\n```\nFigure 5: Plot Showing the Accuracy and Loss of The Feed Forward Neural Network Model Using TF-IDF Features .\n\n\n```{r}\nmax_features <- 2000\ntokenizer <- text_tokenizer(num_words = max_features)\n\nfit_text_tokenizer(tokenizer, sona_tokens$sentence)\n\nsequences <- tokenizer$texts_to_sequences(sona_tokens$sentence)\n\ntrain_rows <- which(sona_tokens$ID %in% train_ids_tf$ID)\n\ntrain <- list()\ntest <- list()\ntrain$x <- sequences[train_rows] \ntest$x <-  sequences[-train_rows]\n\ny <- sona_tokens$president_13\n\ntrain_y <- to_categorical(as.numeric(factor(y[train_rows])) - 1)\ntest_y <- to_categorical(as.numeric(factor(y[-train_rows])) - 1)\nunique(train_y)\nunique(test_y)\n```\n\n```{r}\n# best is 40 \nmaxlen <- 40\nx_train <- train$x %>% pad_sequences(maxlen = maxlen)\nx_test <- test$x %>% pad_sequences(maxlen = maxlen)\n```\n\n```{r}\n# feed forward neural network\nmodel_mlp_tfidf <- keras_model_sequential() %>%\n  layer_embedding(max_features, output_dim = 50, input_length = maxlen) %>%\n  layer_flatten() %>%\n  layer_dense(units = 32, activation = 'relu') %>%\n  layer_dense(units = 32, activation = 'tanh') %>%\n  layer_dense(units = 16, activation = 'relu', kernel_regularizer = regularizer_l2(0.2)) %>%\n  layer_dense(units = 25, activation = 'relu') %>%\n  layer_dense(units = 4, activation = 'softmax')\n\nsummary(model_mlp_tfidf)\n\n# Compile the model\nmodel_mlp_tfidf %>% compile(\n  loss = 'categorical_crossentropy',\n  optimizer = optimizer_adam(learning_rate = 0.001),\n  metrics = c('accuracy')\n)\n\n# Train the model\nx_train <- as.matrix(x_train)\ntrain_mlp <- model_mlp_tfidf %>% fit(\n  x_train, train_y,\n  epochs = 10, batch_size = 10,\n  validation_split = 0.1\n)\n\n# Evaluate the model\nx_test <- as.matrix(x_test)\nresults_mlp_tf <- model_mlp_tfidf %>% evaluate(x_test, test_y, batch_size = 15, verbose = 2)\n\n```\n\n```{r , eval=TRUE, echo=FALSE}\nplot(train_mlp)\n```\nFigure 7: Plot Showing the Accuracy and Loss of The Feed Forward Neural Network Model Using Word Embeddings.\n\n```{r}\nmodel_cnn_tf <- keras_model_sequential() %>%\n  layer_embedding(max_features, output_dim = embedding_dims, input_length = maxlen) %>%\n  layer_conv_1d(filters = 64, kernel_size = 8, activation = \"relu\") %>%\n  layer_dropout(0.5) %>%\n  layer_conv_1d(filters = 100, kernel_size = 20, activation = \"relu\") %>%\n  layer_max_pooling_1d(pool_size = 2) %>%\n  layer_flatten() %>%\n  layer_dense(32, activation = \"relu\", kernel_regularizer = regularizer_l2(0.2)) %>%\n  layer_dense(4, activation = \"softmax\")\n\nsummary(model_cnn_tf)\n\n# Compile the model\nmodel_cnn_tf %>% compile(\n  loss = \"categorical_crossentropy\",\n  optimizer = optimizer_adam(learning_rate = 0.001),\n  metrics = c(\"accuracy\")\n)\n\n# Fit the model\ntrain_cnn_tf <- model_cnn_tf %>% fit(\n  x_train, train_y,\n  epochs = 10, batch_size = 15,\n  validation_split = 0.1\n)\n\n# Evaluate the model\nresults_cnn_tf <- model_cnn_tf %>% evaluate(x_test, test_y, batch_size = 15, verbose = 2)\n\n```\n```{r, eval=TRUE, echo=FALSE}\nplot(train_cnn_tf)\n```\nFigure 8: Plot Showing the Accuracy and Loss of The Convolutional Neural Network Model Using Word Embeddings.\n\n```{r, eval=TRUE}\nmodel_rnn_tf <- keras_model_sequential() %>%\n  layer_embedding(input_dim = max_features, output_dim = embedding_dims, input_length = maxlen) %>%\n  layer_lstm(units = 128, activation = 'tanh', dropout = 0.2, return_sequences = TRUE) %>%\n  layer_lstm(units = 64, activation = 'tanh', dropout = 0.2) %>%\n  layer_dense(units = 64, activation = 'relu') %>%\n  layer_dense(units = 32, activation = 'relu') %>%\n  layer_dense(units = 4, activation = 'softmax')\n\n# Compile the model\nmodel_rnn_tf %>% compile(\n  loss = \"categorical_crossentropy\",\n  optimizer = optimizer_adam(learning_rate = 0.001),\n  metrics = c(\"accuracy\")\n)\n\n# Fit the model\ntrain_rnn_tf <- model_rnn_tf %>% fit(\n  x_train, train_y,\n  epochs = 10, batch_size = 25,\n  validation_split = 0.1\n)\n\n# Evaluate the model\nresults_rnn_tf <- model_rnn_tf %>% evaluate(x_test, test_y, batch_size = 25, verbose = 2)\n```\n\n```{r}\n# Plot the training history\nplot(train_rnn_tf)\n```\n\nFigure 9: Plot Showing the Accuracy and Loss of The Recurrent Neural Network Model Using Word Embeddings.\n\n\n```{r}\n# Load the knitr package if not already loaded\n\nlibrary(knitr)\n\n# Create a data frame with the metrics\nmetrics_df <- data.frame(\n  \"Neural Network Type\" = c(\"Multilayer Perceptron\", \"Multilayer Perceptron\", \"Multilayer Perceptron\", \"Convolutional Neural Networks\", \"Recurrent Neural Network\"),\n  \"Data Type\" = c(\"Bag of Words\", \"TFIDF\", \"Word Embeddings\", \"Word Embeddings\", \"Word Embeddings\"),\n  \"Loss\" = c(2.01, 2.78, 2.74, 1.85, 1.40),\n  \"Accuracy\" = c(0.55, 0.51, 0.47, 0.50, 0.54)\n)\n\n# Create a kable table\nkable_table <- kable(metrics_df, format = \"html\", caption = \"Table 1: Neural Network Metrics\")\n```\n\n```{r, eval=TRUE, echo=FALSE}\n# Print the kable table\nkable_table\n```\n```{r}\nsave.image(file = \"A1Final.RData\")\n```\nTable 1: Table Showing Neural Network Metrics\n\n\n```{r, eval=TRUE, echo=FALSE}\nhist(unlist(lapply(sequences, length)), main = \"Sequence length after tokenization\")\n```\nFigure 6: Histogram Showing the Sequence Length After Tokenization","srcMarkdownNoYaml":"\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE, eval = FALSE, message = FALSE)\n```\n\n```{r Loading Libraries, echo=FALSE, message=FALSE, warning=FALSE, eval=TRUE}\n\n\nlibrary(glmnet)\nlibrary(reticulate)\nlibrary(tensorflow)\nlibrary(keras)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(lubridate)\nlibrary(tidytext)\nlibrary(rpart) \nlibrary(dplyr)\nlibrary(tidytext)\nlibrary(tm)\nlibrary(rpart.plot)\nlibrary(knitr)\nlibrary(kableExtra)\n\nsetwd(\"C:/Users/User/Desktop/MSc_Data_Science/DS4I/SNGKEL002.github.io\")\n\nload(file = \"C:/Users/User/Desktop/MSc_Data_Science/DS4I/SNGKEL002.github.io/A1Final.RData\")\n```\n\n```{r Defining Stop Words}\n# removed stop words \nreplace_reg <- \"(http.*?(\\\\s|.$))|(www.*?(\\\\s|.$))|&amp;|&lt;|&gt;\"\n#rnum <- \"\\\\d+\"\nunnest_reg <- \"[^\\\\w_#@']\"\n```\n\n```{r Reading in Data}\nset.seed(11)\n# set as tibble\nsona <- as_tibble(sona)\nsona <- sona %>% mutate(speech = str_replace(speech, \"\\\\d{1,2} [A-Za-z]+ \\\\d{4}\", \"\")) # Remove dates at the start of the speech\n# clean dates \nsona1 <- sona %>% mutate(speech = str_replace(speech, pattern = \"^Thursday, \", replacement = \"\"))%>%\n  mutate(filename = sub(\"\\\\.txt$\", \" \", filename)) \n\n# remove dates on 2 remaining Ramaphosa speeche# rm white space\n\n\n```\n```{r, eval=TRUE, echo=FALSE}\nggplot(sona1, aes(x = year)) +\n  geom_bar(fill = \"steelblue\") +\n  labs(title = \"Speech Count by Year\",\n       x = \"Year\",\n       y = \"Number of Speeches\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(fill = \"Legend Title\")\n\n```\n\nFigure 1: Barplot Showing the Number of Speeches Given Per Year.\n```{r, eval=TRUE, echo=FALSE}\nggplot(sona1, aes(x = reorder(president_13, -table(president_13)[president_13]), fill = president_13)) +\n  geom_bar() +\n  labs(title = \"Number of Speeches per President\",\n       x = \"President\",\n       y = \"Number of Speeches\") +\n  scale_fill_brewer(palette = \"Set3\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  labs(fill = \"Legend Title\")\n\n```\nFigure 2: Barplot Showing the Number of Speeches Given By Each President.\n\n```{r, eval=TRUE, echo=FALSE}\n\n# Create a plot of speech length against filename\nggplot(sona, aes(x = filename, y = nchar(speech))) +\n  geom_bar(stat = \"identity\", fill = \"blue\") +\n  labs(\n    title = \"Speech Length vs. Filename\",\n    x = \"Filename\",\n    y = \"Speech Length\"\n  ) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n```\nFigure 3: Barplot Showing the Speech Length of Each Speech.\n\n```{r}\nsona <- sona1 %>% mutate(speech = str_trim(speech, side = \"left\")) %>%\n  mutate(filename = sub(\"\\\\.txt$\", \"\", filename))  %>%\n  filter(!(president_13 %in% c(\"Motlanthe\", \"deKlerk\")))\n```\n\n\n```{r Tokenization}\nsona_tokens <- unnest_tokens(sona, sentence, speech, token = 'sentences') \nsona_tokens <- sona_tokens %>% mutate(sentence = str_replace_all(sentence, \"[[:punct:]]\", \"\")) %>%\n                   mutate(ID = row_number()) %>%\n                   mutate(president_13 = as.factor(president_13))\n\nword_bag <- sona_tokens %>% \n            unnest_tokens(input = sentence, output = word, token = 'words') %>%\n            group_by(ID, president_13, word) %>% \n            summarise(\"count\" = n()) %>% filter(!word %in% stop_words$word) %>%\n            top_n(200)\n\n```\n\n```{r Bag of Words}\nsona_tdf <- sona_tokens %>%\n  unnest_tokens(input = sentence, output = word, token = 'words') %>%\n  inner_join(word_bag) %>%\n  group_by(ID, president_13, word) %>%\n  count() %>%  \n  group_by(president_13) %>%\n  mutate(total = sum(n)) %>%\n  ungroup()\n\n# bag of words\nbag_of_words <- sona_tdf %>% \n  select(ID, president_13, word, n) %>% \n  pivot_wider(names_from = word, values_from = n, values_fill = 0) %>%\n  mutate(president_13 = as.factor(president_13))\nclass(bag_of_words)\n\nlevels(bag_of_words$president_13)\n```\n\n```{r}\n# balance dataset \nlibrary(caret)\n#bag_of_words <- caret::downSample(x = bag_of_words[ , -ncol(bag_of_words)],\n #                        y = bag_of_words$president_13, )\n\n# confirm data is balanced \n#table(bag_of_words$president_13)\n\n# train ids\nset.seed(11)\ntrain_ids <- bag_of_words %>%\n  group_by(president_13) %>%\n  slice_sample(prop = 0.7) %>%\n  ungroup() %>%\n  select(ID)\n\ntrain_bow <- bag_of_words %>%\n  right_join(train_ids, by = \"ID\") %>%\n  select(-ID)\n\ntest_bow <- bag_of_words %>%\n  anti_join(train_ids, by = \"ID\") %>%\n  select(-ID)\n\ntrain_bow_x <- train_bow %>% select(-president_13)\ntrain_bow_y <- train_bow$president_13\n\n# test bow\ntest_bow_x <- test_bow %>% select(-president_13)\ntest_bow_y <- test_bow$president_13\n\nnumerical_target_btr <- factor(train_bow_y)\ntrain_bow_y <- as.numeric(numerical_target_btr)-1\ntrain_bow_y <- to_categorical(train_bow_y, dtype = \"float32\")\n\n\nnumerical_target_bte <- factor(test_bow_y)\ntest_bow_y <- as.numeric(numerical_target_bte)-1\ntest_bow_y <- to_categorical(test_bow_y, dtype = \"float32\")\n```\n\n```{r}\n# feed forward neural network \nmodel_ff_bow <- keras_model_sequential() %>%\nlayer_dense(units = 32, activation = \"relu\", input_shape = ncol(train_bow_x)) %>%\nlayer_dense(units = 32, activation = \"relu\", kernel_regularizer = regularizer_l2(0.01)) %>%\nlayer_dense(units = 4, activation = \"softmax\")\nsummary(model_ff_bow)\n# compile model\nmodel_ff_bow %>% compile(\nloss = \"categorical_crossentropy\",\noptimizer = optimizer_adam(learning_rate = 0.001),\nmetrics = c(\"accuracy\")\n)\ngc()\n\ntrain_bow_x <- as.matrix(train_bow_x) \nmodel_ff_bow1 <- model_ff_bow %>% fit(train_bow_x, train_bow_y, epochs = 10, batch_size = 5, validation_split = 0.1)\n\ntest_bow_x<- as.matrix(test_bow_x)\nresults_bownn <- model_ff_bow %>% evaluate(test_bow_x, test_bow_y, batch_size = 15, verbose=2)\n```\n\n```{r, eval=TRUE, echo=FALSE}\nplot(model_ff_bow1)\n```\nFigure 4: Plot Showing the Accuracy and Loss of The Feed Forward Neural Network Model Using Bag of Words Features .\n\n```{r}\n#tfidf \n###tf-idf\nndocs <- length(unique(sona_tdf$ID))\n  \nidf <- sona_tdf %>%\n  group_by(word) %>%\n  summarise(docs_with_word = n()) %>%\n  ungroup() %>%\n  mutate(idf = log(ndocs/docs_with_word)) %>% arrange(desc(idf))\n\nsona_tdf <- sona_tdf %>%\n left_join(idf, by = \"word\") %>%\nmutate(tf = n/total, tf_idf = tf*idf)\n\nsona_tdf <- sona_tdf %>%\n  select(-idf, -tf, -tf_idf) %>%\n  bind_tf_idf(word, ID, n)\n\ntfidf <- sona_tdf %>%\n  select(ID, word, president_13, tf_idf) %>%\n  pivot_wider(names_from = word, values_from = tf_idf, values_fill = 0) %>%\n  left_join(sona_tokens %>% select(ID, president_13))\n\n# split data into train and test\ntrain_ids_tf <- tfidf %>%\n  group_by(president_13) %>%\n  slice_sample(prop = 0.7) %>%\n  ungroup() %>%\n  select(ID)\n\n# tfidf train\ntrain_tfidf <- tfidf %>%\n  right_join(train_ids_tf, by = \"ID\") %>%\n  select(-ID)\n\n# bag of words test\ntest_tfidf <- tfidf %>%\n  anti_join(train_ids_tf, by = \"ID\") %>%\n  select(-ID)\n\ntest_tfidf_x <- test_tfidf %>% select(-president_13)\ntest_tfidf_y <- test_tfidf$president_13\n\ntrain_tfidf_x <- train_tfidf %>% select(-president_13)\ntrain_tfidf_y <- train_tfidf$president_13\n\n# Model\nnumerical_target_tr <- factor(train_tfidf_y)\ntrain_tfidf_y <- as.numeric(numerical_target_tr) - 1\nunique(train_tfidf_y)\ntrain_tfidf_y <- to_categorical(train_tfidf_y, dtype = \"float32\")\nunique(train_tfidf_y)\n\nnumerical_target_test_tf <- factor(test_tfidf_y)\ntest_tfidf_y <- as.numeric(numerical_target_test_tf) - 1\nunique(test_tfidf_y)\ntest_tfidf_y <- to_categorical(test_tfidf_y, dtype = \"float32\")\nunique(test_tfidf_y)\n\n```\n```{r}\n\n# feed forward neural network\nmodel_ffnn_tfidf <- keras_model_sequential() %>%\n  layer_dense(units = 200, activation = \"relu\", input_shape = ncol(train_tfidf_x)) %>%\n  layer_dense(units = 150, activation = \"relu\") %>%\n  layer_dense(units = 100, activation = \"relu\", kernel_regularizer = regularizer_l2(0.01)) %>%\n  layer_dense(units = 50, activation = \"tanh\") %>%\n  layer_dense(units = 4, activation = \"softmax\")\n\nsummary(model_ffnn_tfidf)\n\n# compile model\nmodel_ffnn_tfidf %>% compile(\n  loss = \"categorical_crossentropy\",\n  optimizer = \"adam\",\n  metrics = c(\"accuracy\")\n)\n\n# fit model\ntrain_tfidf_x <- as.matrix(train_tfidf_x)\n\nnn_mod1_tfidf <- model_ffnn_tfidf %>% fit(train_tfidf_x, train_tfidf_y, epochs = 10, batch_size = 15, validation_split = 0.2)\n\ntest_tfidf_x <- as.matrix(test_tfidf_x)\n\nresults_tf_ffnn <- model_ffnn_tfidf %>% evaluate(test_tfidf_x, test_tfidf_y, batch_size = 15, verbose = 2)\n```\n```{r, eval=TRUE, echo=FALSE}\nplot(nn_mod1_tfidf)\n\n```\nFigure 5: Plot Showing the Accuracy and Loss of The Feed Forward Neural Network Model Using TF-IDF Features .\n\n\n```{r}\nmax_features <- 2000\ntokenizer <- text_tokenizer(num_words = max_features)\n\nfit_text_tokenizer(tokenizer, sona_tokens$sentence)\n\nsequences <- tokenizer$texts_to_sequences(sona_tokens$sentence)\n\ntrain_rows <- which(sona_tokens$ID %in% train_ids_tf$ID)\n\ntrain <- list()\ntest <- list()\ntrain$x <- sequences[train_rows] \ntest$x <-  sequences[-train_rows]\n\ny <- sona_tokens$president_13\n\ntrain_y <- to_categorical(as.numeric(factor(y[train_rows])) - 1)\ntest_y <- to_categorical(as.numeric(factor(y[-train_rows])) - 1)\nunique(train_y)\nunique(test_y)\n```\n\n```{r}\n# best is 40 \nmaxlen <- 40\nx_train <- train$x %>% pad_sequences(maxlen = maxlen)\nx_test <- test$x %>% pad_sequences(maxlen = maxlen)\n```\n\n```{r}\n# feed forward neural network\nmodel_mlp_tfidf <- keras_model_sequential() %>%\n  layer_embedding(max_features, output_dim = 50, input_length = maxlen) %>%\n  layer_flatten() %>%\n  layer_dense(units = 32, activation = 'relu') %>%\n  layer_dense(units = 32, activation = 'tanh') %>%\n  layer_dense(units = 16, activation = 'relu', kernel_regularizer = regularizer_l2(0.2)) %>%\n  layer_dense(units = 25, activation = 'relu') %>%\n  layer_dense(units = 4, activation = 'softmax')\n\nsummary(model_mlp_tfidf)\n\n# Compile the model\nmodel_mlp_tfidf %>% compile(\n  loss = 'categorical_crossentropy',\n  optimizer = optimizer_adam(learning_rate = 0.001),\n  metrics = c('accuracy')\n)\n\n# Train the model\nx_train <- as.matrix(x_train)\ntrain_mlp <- model_mlp_tfidf %>% fit(\n  x_train, train_y,\n  epochs = 10, batch_size = 10,\n  validation_split = 0.1\n)\n\n# Evaluate the model\nx_test <- as.matrix(x_test)\nresults_mlp_tf <- model_mlp_tfidf %>% evaluate(x_test, test_y, batch_size = 15, verbose = 2)\n\n```\n\n```{r , eval=TRUE, echo=FALSE}\nplot(train_mlp)\n```\nFigure 7: Plot Showing the Accuracy and Loss of The Feed Forward Neural Network Model Using Word Embeddings.\n\n```{r}\nmodel_cnn_tf <- keras_model_sequential() %>%\n  layer_embedding(max_features, output_dim = embedding_dims, input_length = maxlen) %>%\n  layer_conv_1d(filters = 64, kernel_size = 8, activation = \"relu\") %>%\n  layer_dropout(0.5) %>%\n  layer_conv_1d(filters = 100, kernel_size = 20, activation = \"relu\") %>%\n  layer_max_pooling_1d(pool_size = 2) %>%\n  layer_flatten() %>%\n  layer_dense(32, activation = \"relu\", kernel_regularizer = regularizer_l2(0.2)) %>%\n  layer_dense(4, activation = \"softmax\")\n\nsummary(model_cnn_tf)\n\n# Compile the model\nmodel_cnn_tf %>% compile(\n  loss = \"categorical_crossentropy\",\n  optimizer = optimizer_adam(learning_rate = 0.001),\n  metrics = c(\"accuracy\")\n)\n\n# Fit the model\ntrain_cnn_tf <- model_cnn_tf %>% fit(\n  x_train, train_y,\n  epochs = 10, batch_size = 15,\n  validation_split = 0.1\n)\n\n# Evaluate the model\nresults_cnn_tf <- model_cnn_tf %>% evaluate(x_test, test_y, batch_size = 15, verbose = 2)\n\n```\n```{r, eval=TRUE, echo=FALSE}\nplot(train_cnn_tf)\n```\nFigure 8: Plot Showing the Accuracy and Loss of The Convolutional Neural Network Model Using Word Embeddings.\n\n```{r, eval=TRUE}\nmodel_rnn_tf <- keras_model_sequential() %>%\n  layer_embedding(input_dim = max_features, output_dim = embedding_dims, input_length = maxlen) %>%\n  layer_lstm(units = 128, activation = 'tanh', dropout = 0.2, return_sequences = TRUE) %>%\n  layer_lstm(units = 64, activation = 'tanh', dropout = 0.2) %>%\n  layer_dense(units = 64, activation = 'relu') %>%\n  layer_dense(units = 32, activation = 'relu') %>%\n  layer_dense(units = 4, activation = 'softmax')\n\n# Compile the model\nmodel_rnn_tf %>% compile(\n  loss = \"categorical_crossentropy\",\n  optimizer = optimizer_adam(learning_rate = 0.001),\n  metrics = c(\"accuracy\")\n)\n\n# Fit the model\ntrain_rnn_tf <- model_rnn_tf %>% fit(\n  x_train, train_y,\n  epochs = 10, batch_size = 25,\n  validation_split = 0.1\n)\n\n# Evaluate the model\nresults_rnn_tf <- model_rnn_tf %>% evaluate(x_test, test_y, batch_size = 25, verbose = 2)\n```\n\n```{r}\n# Plot the training history\nplot(train_rnn_tf)\n```\n\nFigure 9: Plot Showing the Accuracy and Loss of The Recurrent Neural Network Model Using Word Embeddings.\n\n\n```{r}\n# Load the knitr package if not already loaded\n\nlibrary(knitr)\n\n# Create a data frame with the metrics\nmetrics_df <- data.frame(\n  \"Neural Network Type\" = c(\"Multilayer Perceptron\", \"Multilayer Perceptron\", \"Multilayer Perceptron\", \"Convolutional Neural Networks\", \"Recurrent Neural Network\"),\n  \"Data Type\" = c(\"Bag of Words\", \"TFIDF\", \"Word Embeddings\", \"Word Embeddings\", \"Word Embeddings\"),\n  \"Loss\" = c(2.01, 2.78, 2.74, 1.85, 1.40),\n  \"Accuracy\" = c(0.55, 0.51, 0.47, 0.50, 0.54)\n)\n\n# Create a kable table\nkable_table <- kable(metrics_df, format = \"html\", caption = \"Table 1: Neural Network Metrics\")\n```\n\n```{r, eval=TRUE, echo=FALSE}\n# Print the kable table\nkable_table\n```\n```{r}\nsave.image(file = \"A1Final.RData\")\n```\nTable 1: Table Showing Neural Network Metrics\n\n\n```{r, eval=TRUE, echo=FALSE}\nhist(unlist(lapply(sequences, length)), main = \"Sequence length after tokenization\")\n```\nFigure 6: Histogram Showing the Sequence Length After Tokenization"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":"html_document","warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"SNGKEL002_A1.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.433","theme":"cosmo","title":"a1","author":"Kelly-Robyn Singh","date":"2023-10-25"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}